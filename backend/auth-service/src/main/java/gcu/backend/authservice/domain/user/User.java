package gcu.backend.authservice.domain.user;

import org.bson.types.ObjectId;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.AccessLevel;
import lombok.AllArgsConstructor;

// "User", MongoDB Collection, used to store the user information
// @Getter, automatically generate Getter
// @NoArgsConstructor, automatically generate Constructor without arguments
// @Builder, automatically generate Builder
// @Document, used to specify the name of the collection
// @AllArgsConstructor, automatically generate Constructor with all arguments
@Getter
@NoArgsConstructor(access = AccessLevel.PROTECTED)
@Builder
@Document(collection = "users")
@AllArgsConstructor
public class User {

    // Field '_id', type 'ObjectId'
    // Default value is generated by MongoDB
    @Id
    private ObjectId _id;

    // Field 'email', type 'String'
    // This value is the email of the user

    // Field 'nickname', type 'String'
    // This value is the nickname of the user

    // Field 'imageUrl', type 'String'
    // This value is the profile image of the user

    private String email; // 이메일
    private String nickname; // 닉네임
    private String imageUrl; // 프로필 이미지

    // Field 'role', type 'Role'
    // This value is the role of the user

    // Field 'socialType', type 'SocialType'
    // This value is the social type of the user

    // Field 'socialId', type 'String'
    // This value is the social id of the user

    // Field 'refreshToken', type 'String'
    // This value is the refresh token of the user
    private Role role;

    private SocialType socialType; // KAKAO, NAVER, GOOGLE

    private String socialId; // 로그인한 소셜 타입의 식별자 값 (일반 로그인인 경우 null)

    private String refreshToken; // 리프레시 토큰

    /*
     * Method 'authorizeUser', used to authorize the user
     * 
     * @param none
     * 
     * @return none
     */
    public void authorizeUser() {
        this.role = Role.USER;
    }

    /*
     * Method 'setRefreshToken', used to set the refresh token
     * 
     * @param refreshToken : String, the refresh token to set
     * 
     * @return none
     * 
     */
    public void setRefreshToken(String refreshToken) {
        this.refreshToken = refreshToken;
    }

    /*
     * Method 'updateRefreshToken', used to update the refresh token
     * 
     * @param updateRefreshToken : String, the refresh token to update
     * 
     * @return none
     */
    public void updateRefreshToken(String updateRefreshToken) {
        this.refreshToken = updateRefreshToken;
    }
}
